// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/fixture/fixture.proto

package statistico_data

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import competition "proto/competition"
import season "proto/season"
import team "proto/team"
import venue "proto/venue"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DateRangeRequest struct {
	// RFC3339 formatted string i.e. "2006-01-02T15:04:05Z07:00"
	DateFrom string `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateTo               string   `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateRangeRequest) Reset()         { *m = DateRangeRequest{} }
func (m *DateRangeRequest) String() string { return proto.CompactTextString(m) }
func (*DateRangeRequest) ProtoMessage()    {}
func (*DateRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fixture_bfb564b4a5205509, []int{0}
}
func (m *DateRangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateRangeRequest.Unmarshal(m, b)
}
func (m *DateRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateRangeRequest.Marshal(b, m, deterministic)
}
func (dst *DateRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateRangeRequest.Merge(dst, src)
}
func (m *DateRangeRequest) XXX_Size() int {
	return xxx_messageInfo_DateRangeRequest.Size(m)
}
func (m *DateRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DateRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DateRangeRequest proto.InternalMessageInfo

func (m *DateRangeRequest) GetDateFrom() string {
	if m != nil {
		return m.DateFrom
	}
	return ""
}

func (m *DateRangeRequest) GetDateTo() string {
	if m != nil {
		return m.DateTo
	}
	return ""
}

type FixtureRequest struct {
	// The ID of the Fixture to be retrieved
	FixtureId            int64    `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FixtureRequest) Reset()         { *m = FixtureRequest{} }
func (m *FixtureRequest) String() string { return proto.CompactTextString(m) }
func (*FixtureRequest) ProtoMessage()    {}
func (*FixtureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fixture_bfb564b4a5205509, []int{1}
}
func (m *FixtureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixtureRequest.Unmarshal(m, b)
}
func (m *FixtureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixtureRequest.Marshal(b, m, deterministic)
}
func (dst *FixtureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixtureRequest.Merge(dst, src)
}
func (m *FixtureRequest) XXX_Size() int {
	return xxx_messageInfo_FixtureRequest.Size(m)
}
func (m *FixtureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FixtureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FixtureRequest proto.InternalMessageInfo

func (m *FixtureRequest) GetFixtureId() int64 {
	if m != nil {
		return m.FixtureId
	}
	return 0
}

type Fixture struct {
	Id                   int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Competition          *competition.Competition `protobuf:"bytes,2,opt,name=competition,proto3" json:"competition,omitempty"`
	Season               *season.Season           `protobuf:"bytes,3,opt,name=season,proto3" json:"season,omitempty"`
	HomeTeam             *team.Team               `protobuf:"bytes,4,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam             *team.Team               `protobuf:"bytes,5,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Venue                *venue.Venue             `protobuf:"bytes,6,opt,name=venue,proto3" json:"venue,omitempty"`
	RefereeId            *wrappers.Int64Value     `protobuf:"bytes,7,opt,name=referee_id,json=refereeId,proto3" json:"referee_id,omitempty"`
	DateTime             int64                    `protobuf:"varint,8,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Fixture) Reset()         { *m = Fixture{} }
func (m *Fixture) String() string { return proto.CompactTextString(m) }
func (*Fixture) ProtoMessage()    {}
func (*Fixture) Descriptor() ([]byte, []int) {
	return fileDescriptor_fixture_bfb564b4a5205509, []int{2}
}
func (m *Fixture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fixture.Unmarshal(m, b)
}
func (m *Fixture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fixture.Marshal(b, m, deterministic)
}
func (dst *Fixture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fixture.Merge(dst, src)
}
func (m *Fixture) XXX_Size() int {
	return xxx_messageInfo_Fixture.Size(m)
}
func (m *Fixture) XXX_DiscardUnknown() {
	xxx_messageInfo_Fixture.DiscardUnknown(m)
}

var xxx_messageInfo_Fixture proto.InternalMessageInfo

func (m *Fixture) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Fixture) GetCompetition() *competition.Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Fixture) GetSeason() *season.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Fixture) GetHomeTeam() *team.Team {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *Fixture) GetAwayTeam() *team.Team {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

func (m *Fixture) GetVenue() *venue.Venue {
	if m != nil {
		return m.Venue
	}
	return nil
}

func (m *Fixture) GetRefereeId() *wrappers.Int64Value {
	if m != nil {
		return m.RefereeId
	}
	return nil
}

func (m *Fixture) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*DateRangeRequest)(nil), "statistico_data.DateRangeRequest")
	proto.RegisterType((*FixtureRequest)(nil), "statistico_data.FixtureRequest")
	proto.RegisterType((*Fixture)(nil), "statistico_data.Fixture")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	ListFixtures(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (FixtureService_ListFixturesClient, error)
	FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error)
}

type fixtureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixtureServiceClient(cc *grpc.ClientConn) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) ListFixtures(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (FixtureService_ListFixturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FixtureService_serviceDesc.Streams[0], "/statistico_data.FixtureService/ListFixtures", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceListFixturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FixtureService_ListFixturesClient interface {
	Recv() (*Fixture, error)
	grpc.ClientStream
}

type fixtureServiceListFixturesClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceListFixturesClient) Recv() (*Fixture, error) {
	m := new(Fixture)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fixtureServiceClient) FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error) {
	out := new(Fixture)
	err := c.cc.Invoke(ctx, "/statistico_data.FixtureService/FixtureByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	ListFixtures(*DateRangeRequest, FixtureService_ListFixturesServer) error
	FixtureByID(context.Context, *FixtureRequest) (*Fixture, error)
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_ListFixtures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).ListFixtures(m, &fixtureServiceListFixturesServer{stream})
}

type FixtureService_ListFixturesServer interface {
	Send(*Fixture) error
	grpc.ServerStream
}

type fixtureServiceListFixturesServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceListFixturesServer) Send(m *Fixture) error {
	return x.ServerStream.SendMsg(m)
}

func _FixtureService_FixtureByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).FixtureByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistico_data.FixtureService/FixtureByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).FixtureByID(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statistico_data.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FixtureByID",
			Handler:    _FixtureService_FixtureByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFixtures",
			Handler:       _FixtureService_ListFixtures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fixture/fixture.proto",
}

func init() {
	proto.RegisterFile("proto/fixture/fixture.proto", fileDescriptor_fixture_bfb564b4a5205509)
}

var fileDescriptor_fixture_bfb564b4a5205509 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6f, 0x13, 0x31,
	0x10, 0xc5, 0x49, 0x4a, 0x93, 0xec, 0x04, 0x15, 0x64, 0xa9, 0x64, 0x49, 0xf8, 0x1b, 0x2e, 0x1c,
	0xd0, 0x2e, 0x0a, 0x88, 0x03, 0x07, 0x0e, 0x50, 0x55, 0x04, 0x21, 0x21, 0xb9, 0x51, 0xaf, 0x91,
	0x9b, 0x9d, 0x04, 0x4b, 0xdd, 0x75, 0xb0, 0x67, 0x5b, 0xfa, 0xa1, 0xf8, 0x80, 0xdc, 0x90, 0xc7,
	0x4e, 0x88, 0xb2, 0x02, 0x71, 0xf1, 0x9f, 0x79, 0xef, 0x37, 0xbb, 0x7e, 0x36, 0x8c, 0xd6, 0xd6,
	0x90, 0xc9, 0x97, 0xfa, 0x07, 0xd5, 0x16, 0x37, 0x73, 0xc6, 0x55, 0x71, 0xd7, 0x91, 0x22, 0xed,
	0x48, 0x2f, 0xcc, 0xbc, 0x50, 0xa4, 0x86, 0x8f, 0x57, 0xc6, 0xac, 0x2e, 0x31, 0x67, 0xf9, 0xa2,
	0x5e, 0xe6, 0xd7, 0x56, 0xad, 0xd7, 0x68, 0x5d, 0x00, 0x86, 0xcf, 0x43, 0xb7, 0x85, 0x29, 0xd7,
	0x48, 0x9a, 0xb4, 0xa9, 0x76, 0xd7, 0xd1, 0xf4, 0x20, 0x98, 0x1c, 0x2a, 0x67, 0xaa, 0x38, 0x45,
	0xe9, 0x38, 0x48, 0x84, 0xaa, 0xe4, 0x21, 0x96, 0x07, 0xa1, 0x7c, 0x85, 0x55, 0x8d, 0x61, 0x0c,
	0xc2, 0xf8, 0x13, 0xdc, 0x3b, 0x51, 0x84, 0x52, 0x55, 0x2b, 0x94, 0xf8, 0xbd, 0x46, 0x47, 0x62,
	0x04, 0x49, 0xa1, 0x08, 0xe7, 0x4b, 0x6b, 0xca, 0xb4, 0xf5, 0xb4, 0xf5, 0x22, 0x91, 0x3d, 0x5f,
	0x38, 0xb5, 0xa6, 0x14, 0x03, 0xe8, 0xb2, 0x48, 0x26, 0x6d, 0xb3, 0xd4, 0xf1, 0xdb, 0x99, 0x19,
	0xe7, 0x70, 0x74, 0x1a, 0xce, 0xbe, 0xe9, 0xf3, 0x08, 0x20, 0xa6, 0x31, 0xd7, 0x05, 0x37, 0x3a,
	0x90, 0x49, 0xac, 0x4c, 0x8b, 0xf1, 0xaf, 0x36, 0x74, 0x23, 0x21, 0x8e, 0xa0, 0xbd, 0xb5, 0xb4,
	0x75, 0x21, 0xde, 0x43, 0x7f, 0xe7, 0xd8, 0xfc, 0xa5, 0xfe, 0xe4, 0x61, 0xb6, 0x97, 0x66, 0xf6,
	0xf1, 0x8f, 0x47, 0xee, 0x02, 0x22, 0x87, 0x4e, 0x88, 0x25, 0x3d, 0x60, 0x74, 0xd0, 0x40, 0xcf,
	0x58, 0x96, 0xd1, 0x26, 0x26, 0x90, 0x7c, 0x33, 0x25, 0xce, 0x7d, 0x66, 0xe9, 0x6d, 0x66, 0x8e,
	0x1b, 0xcc, 0x0c, 0x55, 0x29, 0x7b, 0xde, 0xe7, 0x57, 0x9e, 0x51, 0xd7, 0xea, 0x26, 0x30, 0x87,
	0xff, 0x64, 0xbc, 0x8f, 0x99, 0x97, 0x70, 0xc8, 0xf1, 0xa7, 0x1d, 0xf6, 0xdf, 0x6f, 0xf8, 0xcf,
	0xbd, 0x2a, 0x83, 0x49, 0xbc, 0x03, 0xb0, 0xb8, 0x44, 0x8b, 0x9c, 0x60, 0x97, 0x91, 0x51, 0x16,
	0x9e, 0x50, 0xb6, 0x79, 0x42, 0xd9, 0xb4, 0xa2, 0xb7, 0x6f, 0xce, 0xd5, 0x65, 0x8d, 0x32, 0x89,
	0xf6, 0x69, 0xb1, 0xbd, 0x45, 0xd2, 0x25, 0xa6, 0x3d, 0x4e, 0x96, 0x6f, 0x71, 0xa6, 0x4b, 0x9c,
	0xfc, 0x6c, 0x6d, 0x6f, 0xeb, 0x0c, 0xed, 0x95, 0x5e, 0xa0, 0xf8, 0x0a, 0x77, 0xbe, 0x68, 0x47,
	0xb1, 0xea, 0xc4, 0xb3, 0xc6, 0xaf, 0xed, 0x3f, 0x94, 0x61, 0xda, 0xb0, 0x44, 0x7a, 0x7c, 0xeb,
	0x55, 0x4b, 0x7c, 0x86, 0x7e, 0xdc, 0x7e, 0xb8, 0x99, 0x9e, 0x88, 0x27, 0x7f, 0x33, 0xff, 0x47,
	0xb7, 0x8b, 0x0e, 0x1f, 0xf6, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x79, 0x03, 0x18,
	0x6d, 0x03, 0x00, 0x00,
}
