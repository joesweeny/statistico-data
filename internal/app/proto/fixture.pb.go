// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/app/proto/fixture.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DateRangeRequest struct {
	// RFC3339 formatted string i.e. "2006-01-02T15:04:05Z07:00"
	DateFrom string `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// RFC3339 formatted string i.e "2006-01-02T15:04:05Z07:00"
	DateTo               string   `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateRangeRequest) Reset()         { *m = DateRangeRequest{} }
func (m *DateRangeRequest) String() string { return proto.CompactTextString(m) }
func (*DateRangeRequest) ProtoMessage()    {}
func (*DateRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8336772ad2f813d9, []int{0}
}

func (m *DateRangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateRangeRequest.Unmarshal(m, b)
}
func (m *DateRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateRangeRequest.Marshal(b, m, deterministic)
}
func (m *DateRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateRangeRequest.Merge(m, src)
}
func (m *DateRangeRequest) XXX_Size() int {
	return xxx_messageInfo_DateRangeRequest.Size(m)
}
func (m *DateRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DateRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DateRangeRequest proto.InternalMessageInfo

func (m *DateRangeRequest) GetDateFrom() string {
	if m != nil {
		return m.DateFrom
	}
	return ""
}

func (m *DateRangeRequest) GetDateTo() string {
	if m != nil {
		return m.DateTo
	}
	return ""
}

type Fixture struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Competition          *Competition         `protobuf:"bytes,2,opt,name=competition,proto3" json:"competition,omitempty"`
	Season               *Season              `protobuf:"bytes,3,opt,name=season,proto3" json:"season,omitempty"`
	Round                *Round               `protobuf:"bytes,4,opt,name=round,proto3" json:"round,omitempty"`
	HomeTeam             *Team                `protobuf:"bytes,5,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam             *Team                `protobuf:"bytes,6,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Venue                *Venue               `protobuf:"bytes,7,opt,name=venue,proto3" json:"venue,omitempty"`
	RefereeId            *wrappers.Int64Value `protobuf:"bytes,8,opt,name=referee_id,json=refereeId,proto3" json:"referee_id,omitempty"`
	DateTime             int64                `protobuf:"varint,9,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Fixture) Reset()         { *m = Fixture{} }
func (m *Fixture) String() string { return proto.CompactTextString(m) }
func (*Fixture) ProtoMessage()    {}
func (*Fixture) Descriptor() ([]byte, []int) {
	return fileDescriptor_8336772ad2f813d9, []int{1}
}

func (m *Fixture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fixture.Unmarshal(m, b)
}
func (m *Fixture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fixture.Marshal(b, m, deterministic)
}
func (m *Fixture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fixture.Merge(m, src)
}
func (m *Fixture) XXX_Size() int {
	return xxx_messageInfo_Fixture.Size(m)
}
func (m *Fixture) XXX_DiscardUnknown() {
	xxx_messageInfo_Fixture.DiscardUnknown(m)
}

var xxx_messageInfo_Fixture proto.InternalMessageInfo

func (m *Fixture) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Fixture) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Fixture) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Fixture) GetRound() *Round {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Fixture) GetHomeTeam() *Team {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *Fixture) GetAwayTeam() *Team {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

func (m *Fixture) GetVenue() *Venue {
	if m != nil {
		return m.Venue
	}
	return nil
}

func (m *Fixture) GetRefereeId() *wrappers.Int64Value {
	if m != nil {
		return m.RefereeId
	}
	return nil
}

func (m *Fixture) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*DateRangeRequest)(nil), "proto.DateRangeRequest")
	proto.RegisterType((*Fixture)(nil), "proto.Fixture")
}

func init() { proto.RegisterFile("internal/app/proto/fixture.proto", fileDescriptor_8336772ad2f813d9) }

var fileDescriptor_8336772ad2f813d9 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xd9, 0x2d, 0xfb, 0x27, 0x93, 0xb2, 0x42, 0x96, 0x50, 0xad, 0xad, 0x28, 0x25, 0x02,
	0xa9, 0xa7, 0x04, 0x95, 0xaa, 0x07, 0xb8, 0x41, 0x55, 0xb1, 0x12, 0x27, 0x77, 0xd5, 0xeb, 0xca,
	0x6d, 0x26, 0x8b, 0xa5, 0x75, 0x1c, 0x1c, 0xa7, 0xa5, 0x0f, 0xc0, 0xd3, 0xf2, 0x12, 0xc8, 0x63,
	0xb7, 0x74, 0x51, 0xe0, 0x94, 0xf8, 0xfb, 0x7e, 0x63, 0x8f, 0xbf, 0x31, 0x1c, 0xaa, 0xda, 0xa1,
	0xad, 0xe5, 0xa6, 0x90, 0x4d, 0x53, 0x34, 0xd6, 0x38, 0x53, 0x54, 0xea, 0x87, 0xeb, 0x2c, 0xe6,
	0xb4, 0x62, 0x23, 0xfa, 0xcc, 0x0f, 0xd6, 0xc6, 0xac, 0x37, 0x18, 0x90, 0xab, 0xae, 0x2a, 0x6e,
	0xad, 0x6c, 0x1a, 0xb4, 0x6d, 0xc0, 0xe6, 0x6f, 0x7a, 0x36, 0xba, 0x36, 0xba, 0x41, 0xa7, 0x9c,
	0x32, 0x75, 0xa4, 0x5e, 0xf7, 0x50, 0x16, 0xbf, 0x77, 0xd8, 0xba, 0xfb, 0x8d, 0x0e, 0xfa, 0x10,
	0xd3, 0xd5, 0x65, 0xf4, 0x5f, 0xf5, 0xf8, 0x2d, 0xca, 0xf6, 0xe1, 0x8c, 0x97, 0x3d, 0x80, 0x43,
	0xa9, 0xff, 0xb3, 0xff, 0x0d, 0xd6, 0x5d, 0xbc, 0x6f, 0xf6, 0x05, 0x9e, 0x9f, 0x49, 0x87, 0x42,
	0xd6, 0x6b, 0x14, 0xa1, 0x35, 0xb6, 0x0f, 0x49, 0x29, 0x1d, 0xae, 0x2a, 0x6b, 0x34, 0x1f, 0x1c,
	0x0e, 0x8e, 0x12, 0x31, 0xf5, 0xc2, 0xb9, 0x35, 0x9a, 0xed, 0xc1, 0x84, 0x4c, 0x67, 0xf8, 0x90,
	0xac, 0xb1, 0x5f, 0x2e, 0x4d, 0xf6, 0x6b, 0x08, 0x93, 0xf3, 0x90, 0x25, 0x9b, 0xc1, 0x50, 0x95,
	0x54, 0xba, 0x23, 0x86, 0xaa, 0x64, 0x27, 0x90, 0x3e, 0x4a, 0x87, 0x0a, 0xd3, 0x63, 0x16, 0x5a,
	0xc8, 0x3f, 0xff, 0x71, 0xc4, 0x63, 0x8c, 0xbd, 0x85, 0x71, 0xb8, 0x2a, 0xdf, 0xa1, 0x82, 0x67,
	0xb1, 0xe0, 0x82, 0x44, 0x11, 0x4d, 0x96, 0xc1, 0x88, 0x12, 0xe3, 0x4f, 0x89, 0xda, 0x8d, 0x94,
	0xf0, 0x9a, 0x08, 0x16, 0x3b, 0x82, 0xe4, 0x9b, 0xd1, 0xb8, 0xf2, 0xc9, 0xf0, 0x11, 0x71, 0x69,
	0xe4, 0x96, 0x28, 0xb5, 0x98, 0x7a, 0xd7, 0xff, 0x79, 0x52, 0xde, 0xca, 0xbb, 0x40, 0x8e, 0x7b,
	0x48, 0xef, 0x12, 0x99, 0xc1, 0x88, 0x92, 0xe4, 0x93, 0xad, 0x73, 0x2f, 0xbd, 0x26, 0x82, 0xc5,
	0x3e, 0x00, 0x58, 0xac, 0xd0, 0x22, 0xae, 0x54, 0xc9, 0xa7, 0x04, 0xee, 0xe7, 0xe1, 0x71, 0xe5,
	0xf7, 0x8f, 0x2b, 0x5f, 0xd4, 0xee, 0xf4, 0xe4, 0x52, 0x6e, 0x3a, 0x14, 0x49, 0xc4, 0x17, 0xe5,
	0xc3, 0x18, 0x9c, 0xd2, 0xc8, 0x13, 0xca, 0x92, 0xc6, 0xb0, 0x54, 0x1a, 0x8f, 0x7f, 0x0e, 0x60,
	0x16, 0xd3, 0xbe, 0x40, 0x7b, 0xa3, 0xae, 0x91, 0x7d, 0x84, 0xdd, 0xaf, 0xaa, 0x75, 0x51, 0x6d,
	0xd9, 0x5e, 0x6c, 0xe8, 0xef, 0xf9, 0xce, 0x67, 0xd1, 0x88, 0x64, 0xf6, 0xe4, 0xdd, 0x80, 0x9d,
	0x42, 0x1a, 0x97, 0x9f, 0xee, 0x16, 0x67, 0xec, 0xc5, 0x36, 0xf2, 0xcf, 0xca, 0xab, 0x31, 0x09,
	0xef, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x3f, 0x58, 0xeb, 0x5a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	ListFixtures(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (FixtureService_ListFixturesClient, error)
	FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error)
}

type fixtureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixtureServiceClient(cc *grpc.ClientConn) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) ListFixtures(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (FixtureService_ListFixturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FixtureService_serviceDesc.Streams[0], "/proto.FixtureService/ListFixtures", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceListFixturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FixtureService_ListFixturesClient interface {
	Recv() (*Fixture, error)
	grpc.ClientStream
}

type fixtureServiceListFixturesClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceListFixturesClient) Recv() (*Fixture, error) {
	m := new(Fixture)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fixtureServiceClient) FixtureByID(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*Fixture, error) {
	out := new(Fixture)
	err := c.cc.Invoke(ctx, "/proto.FixtureService/FixtureByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	ListFixtures(*DateRangeRequest, FixtureService_ListFixturesServer) error
	FixtureByID(context.Context, *FixtureRequest) (*Fixture, error)
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) ListFixtures(req *DateRangeRequest, srv FixtureService_ListFixturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFixtures not implemented")
}
func (*UnimplementedFixtureServiceServer) FixtureByID(ctx context.Context, req *FixtureRequest) (*Fixture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixtureByID not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_ListFixtures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FixtureServiceServer).ListFixtures(m, &fixtureServiceListFixturesServer{stream})
}

type FixtureService_ListFixturesServer interface {
	Send(*Fixture) error
	grpc.ServerStream
}

type fixtureServiceListFixturesServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceListFixturesServer) Send(m *Fixture) error {
	return x.ServerStream.SendMsg(m)
}

func _FixtureService_FixtureByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixtureServiceServer).FixtureByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FixtureService/FixtureByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixtureServiceServer).FixtureByID(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FixtureByID",
			Handler:    _FixtureService_FixtureByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFixtures",
			Handler:       _FixtureService_ListFixtures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/app/proto/fixture.proto",
}
