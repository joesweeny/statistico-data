// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/proto/stats/team/stats.proto

package team // import "github.com/statistico/statistico-data/internal/proto/stats/team"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FixtureRequest struct {
	FixtureId            uint64   `protobuf:"varint,1,opt,name=fixture_id,json=fixtureId,proto3" json:"fixture_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FixtureRequest) Reset()         { *m = FixtureRequest{} }
func (m *FixtureRequest) String() string { return proto.CompactTextString(m) }
func (*FixtureRequest) ProtoMessage()    {}
func (*FixtureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stats_109b86136fdae174, []int{0}
}
func (m *FixtureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixtureRequest.Unmarshal(m, b)
}
func (m *FixtureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixtureRequest.Marshal(b, m, deterministic)
}
func (dst *FixtureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixtureRequest.Merge(dst, src)
}
func (m *FixtureRequest) XXX_Size() int {
	return xxx_messageInfo_FixtureRequest.Size(m)
}
func (m *FixtureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FixtureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FixtureRequest proto.InternalMessageInfo

func (m *FixtureRequest) GetFixtureId() uint64 {
	if m != nil {
		return m.FixtureId
	}
	return 0
}

type StatsResponse struct {
	HomeTeam             []*TeamStats `protobuf:"bytes,1,rep,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam             []*TeamStats `protobuf:"bytes,2,rep,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StatsResponse) Reset()         { *m = StatsResponse{} }
func (m *StatsResponse) String() string { return proto.CompactTextString(m) }
func (*StatsResponse) ProtoMessage()    {}
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stats_109b86136fdae174, []int{1}
}
func (m *StatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsResponse.Unmarshal(m, b)
}
func (m *StatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsResponse.Marshal(b, m, deterministic)
}
func (dst *StatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsResponse.Merge(dst, src)
}
func (m *StatsResponse) XXX_Size() int {
	return xxx_messageInfo_StatsResponse.Size(m)
}
func (m *StatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatsResponse proto.InternalMessageInfo

func (m *StatsResponse) GetHomeTeam() []*TeamStats {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *StatsResponse) GetAwayTeam() []*TeamStats {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

type TeamStats struct {
	TeamId               uint64                `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ShotsTotal           *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=shots_total,json=shotsTotal,proto3" json:"shots_total,omitempty"`
	ShotsOnGoal          *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=shots_on_goal,json=shotsOnGoal,proto3" json:"shots_on_goal,omitempty"`
	ShotsOffGoal         *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=shots_off_goal,json=shotsOffGoal,proto3" json:"shots_off_goal,omitempty"`
	ShotsBlocked         *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=shots_blocked,json=shotsBlocked,proto3" json:"shots_blocked,omitempty"`
	ShotsInsideBox       *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=shots_inside_box,json=shotsInsideBox,proto3" json:"shots_inside_box,omitempty"`
	ShotsOutsideBox      *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=shots_outside_box,json=shotsOutsideBox,proto3" json:"shots_outside_box,omitempty"`
	PassesTotal          *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=passes_total,json=passesTotal,proto3" json:"passes_total,omitempty"`
	PassesAccuracy       *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=passes_accuracy,json=passesAccuracy,proto3" json:"passes_accuracy,omitempty"`
	PassesPercentage     *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=passes_percentage,json=passesPercentage,proto3" json:"passes_percentage,omitempty"`
	AttacksTotal         *wrappers.UInt32Value `protobuf:"bytes,11,opt,name=attacks_total,json=attacksTotal,proto3" json:"attacks_total,omitempty"`
	AttacksDangerous     *wrappers.UInt32Value `protobuf:"bytes,12,opt,name=attacks_dangerous,json=attacksDangerous,proto3" json:"attacks_dangerous,omitempty"`
	Fouls                *wrappers.UInt32Value `protobuf:"bytes,13,opt,name=fouls,proto3" json:"fouls,omitempty"`
	Corners              *wrappers.UInt32Value `protobuf:"bytes,14,opt,name=corners,proto3" json:"corners,omitempty"`
	Offsides             *wrappers.UInt32Value `protobuf:"bytes,15,opt,name=offsides,proto3" json:"offsides,omitempty"`
	Possession           *wrappers.UInt32Value `protobuf:"bytes,16,opt,name=possession,proto3" json:"possession,omitempty"`
	YellowCards          *wrappers.UInt32Value `protobuf:"bytes,17,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	RedCards             *wrappers.UInt32Value `protobuf:"bytes,18,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	Saves                *wrappers.UInt32Value `protobuf:"bytes,19,opt,name=saves,proto3" json:"saves,omitempty"`
	Substitutions        *wrappers.UInt32Value `protobuf:"bytes,20,opt,name=substitutions,proto3" json:"substitutions,omitempty"`
	GoalKicks            *wrappers.UInt32Value `protobuf:"bytes,21,opt,name=goal_kicks,json=goalKicks,proto3" json:"goal_kicks,omitempty"`
	GoalAttempts         *wrappers.UInt32Value `protobuf:"bytes,22,opt,name=goal_attempts,json=goalAttempts,proto3" json:"goal_attempts,omitempty"`
	FreeKicks            *wrappers.UInt32Value `protobuf:"bytes,23,opt,name=free_kicks,json=freeKicks,proto3" json:"free_kicks,omitempty"`
	ThrowIns             *wrappers.UInt32Value `protobuf:"bytes,24,opt,name=throw_ins,json=throwIns,proto3" json:"throw_ins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TeamStats) Reset()         { *m = TeamStats{} }
func (m *TeamStats) String() string { return proto.CompactTextString(m) }
func (*TeamStats) ProtoMessage()    {}
func (*TeamStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_stats_109b86136fdae174, []int{2}
}
func (m *TeamStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamStats.Unmarshal(m, b)
}
func (m *TeamStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamStats.Marshal(b, m, deterministic)
}
func (dst *TeamStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamStats.Merge(dst, src)
}
func (m *TeamStats) XXX_Size() int {
	return xxx_messageInfo_TeamStats.Size(m)
}
func (m *TeamStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamStats.DiscardUnknown(m)
}

var xxx_messageInfo_TeamStats proto.InternalMessageInfo

func (m *TeamStats) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TeamStats) GetShotsTotal() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsTotal
	}
	return nil
}

func (m *TeamStats) GetShotsOnGoal() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsOnGoal
	}
	return nil
}

func (m *TeamStats) GetShotsOffGoal() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsOffGoal
	}
	return nil
}

func (m *TeamStats) GetShotsBlocked() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsBlocked
	}
	return nil
}

func (m *TeamStats) GetShotsInsideBox() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsInsideBox
	}
	return nil
}

func (m *TeamStats) GetShotsOutsideBox() *wrappers.UInt32Value {
	if m != nil {
		return m.ShotsOutsideBox
	}
	return nil
}

func (m *TeamStats) GetPassesTotal() *wrappers.UInt32Value {
	if m != nil {
		return m.PassesTotal
	}
	return nil
}

func (m *TeamStats) GetPassesAccuracy() *wrappers.UInt32Value {
	if m != nil {
		return m.PassesAccuracy
	}
	return nil
}

func (m *TeamStats) GetPassesPercentage() *wrappers.UInt32Value {
	if m != nil {
		return m.PassesPercentage
	}
	return nil
}

func (m *TeamStats) GetAttacksTotal() *wrappers.UInt32Value {
	if m != nil {
		return m.AttacksTotal
	}
	return nil
}

func (m *TeamStats) GetAttacksDangerous() *wrappers.UInt32Value {
	if m != nil {
		return m.AttacksDangerous
	}
	return nil
}

func (m *TeamStats) GetFouls() *wrappers.UInt32Value {
	if m != nil {
		return m.Fouls
	}
	return nil
}

func (m *TeamStats) GetCorners() *wrappers.UInt32Value {
	if m != nil {
		return m.Corners
	}
	return nil
}

func (m *TeamStats) GetOffsides() *wrappers.UInt32Value {
	if m != nil {
		return m.Offsides
	}
	return nil
}

func (m *TeamStats) GetPossession() *wrappers.UInt32Value {
	if m != nil {
		return m.Possession
	}
	return nil
}

func (m *TeamStats) GetYellowCards() *wrappers.UInt32Value {
	if m != nil {
		return m.YellowCards
	}
	return nil
}

func (m *TeamStats) GetRedCards() *wrappers.UInt32Value {
	if m != nil {
		return m.RedCards
	}
	return nil
}

func (m *TeamStats) GetSaves() *wrappers.UInt32Value {
	if m != nil {
		return m.Saves
	}
	return nil
}

func (m *TeamStats) GetSubstitutions() *wrappers.UInt32Value {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

func (m *TeamStats) GetGoalKicks() *wrappers.UInt32Value {
	if m != nil {
		return m.GoalKicks
	}
	return nil
}

func (m *TeamStats) GetGoalAttempts() *wrappers.UInt32Value {
	if m != nil {
		return m.GoalAttempts
	}
	return nil
}

func (m *TeamStats) GetFreeKicks() *wrappers.UInt32Value {
	if m != nil {
		return m.FreeKicks
	}
	return nil
}

func (m *TeamStats) GetThrowIns() *wrappers.UInt32Value {
	if m != nil {
		return m.ThrowIns
	}
	return nil
}

func init() {
	proto.RegisterType((*FixtureRequest)(nil), "team_stats.FixtureRequest")
	proto.RegisterType((*StatsResponse)(nil), "team_stats.StatsResponse")
	proto.RegisterType((*TeamStats)(nil), "team_stats.TeamStats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeamStatsServiceClient is the client API for TeamStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamStatsServiceClient interface {
	GetTeamStatsForFixture(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type teamStatsServiceClient struct {
	cc *grpc.ClientConn
}

func NewTeamStatsServiceClient(cc *grpc.ClientConn) TeamStatsServiceClient {
	return &teamStatsServiceClient{cc}
}

func (c *teamStatsServiceClient) GetTeamStatsForFixture(ctx context.Context, in *FixtureRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/team_stats.TeamStatsService/GetTeamStatsForFixture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamStatsServiceServer is the server API for TeamStatsService service.
type TeamStatsServiceServer interface {
	GetTeamStatsForFixture(context.Context, *FixtureRequest) (*StatsResponse, error)
}

func RegisterTeamStatsServiceServer(s *grpc.Server, srv TeamStatsServiceServer) {
	s.RegisterService(&_TeamStatsService_serviceDesc, srv)
}

func _TeamStatsService_GetTeamStatsForFixture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixtureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamStatsServiceServer).GetTeamStatsForFixture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team_stats.TeamStatsService/GetTeamStatsForFixture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamStatsServiceServer).GetTeamStatsForFixture(ctx, req.(*FixtureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamStatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "team_stats.TeamStatsService",
	HandlerType: (*TeamStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamStatsForFixture",
			Handler:    _TeamStatsService_GetTeamStatsForFixture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/stats/team/stats.proto",
}

func init() {
	proto.RegisterFile("internal/proto/stats/team/stats.proto", fileDescriptor_stats_109b86136fdae174)
}

var fileDescriptor_stats_109b86136fdae174 = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x5f, 0x6f, 0xd3, 0x3c,
	0x14, 0xc6, 0xdf, 0xee, 0x7f, 0x4e, 0xd7, 0xad, 0xf5, 0xcb, 0x36, 0x33, 0x01, 0x9a, 0x2a, 0x21,
	0xed, 0x86, 0x54, 0xca, 0x24, 0xc4, 0x04, 0x68, 0xb4, 0xc0, 0x46, 0xc4, 0x05, 0xd0, 0x0d, 0x2e,
	0xb8, 0x89, 0xdc, 0xe4, 0xa4, 0x8d, 0x9a, 0xc6, 0xc1, 0x76, 0xd6, 0xed, 0x53, 0xf3, 0x15, 0x90,
	0xe3, 0x24, 0xdb, 0x2e, 0x40, 0xbe, 0x8b, 0x4f, 0x9f, 0xdf, 0x73, 0x8e, 0x8f, 0x5d, 0x1f, 0x78,
	0x9e, 0x64, 0x0a, 0x45, 0xc6, 0xd2, 0x41, 0x2e, 0xb8, 0xe2, 0x03, 0xa9, 0x98, 0x92, 0x03, 0x85,
	0x6c, 0x61, 0x3e, 0xdd, 0x32, 0x4c, 0x40, 0x47, 0x82, 0x32, 0x72, 0xf8, 0x6c, 0xca, 0xf9, 0x34,
	0x45, 0x03, 0x4c, 0x8a, 0x78, 0xb0, 0x14, 0x2c, 0xcf, 0x51, 0x54, 0xda, 0xfe, 0x00, 0x76, 0xce,
	0x93, 0x1b, 0x55, 0x08, 0x1c, 0xe3, 0xaf, 0x02, 0xa5, 0x22, 0x4f, 0x01, 0x62, 0x13, 0x09, 0x92,
	0x88, 0xb6, 0x8e, 0x5a, 0xc7, 0x6b, 0x63, 0xa7, 0x8a, 0xf8, 0x51, 0x7f, 0x09, 0x9d, 0x4b, 0xed,
	0x3c, 0x46, 0x99, 0xf3, 0x4c, 0x22, 0xf1, 0xc0, 0x99, 0xf1, 0x05, 0x06, 0x3a, 0x29, 0x6d, 0x1d,
	0xad, 0x1e, 0xb7, 0xbd, 0x3d, 0xf7, 0xae, 0x02, 0xf7, 0x0a, 0xd9, 0xc2, 0x10, 0x5b, 0x5a, 0xa7,
	0x97, 0x9a, 0x61, 0x4b, 0x76, 0x6b, 0x98, 0x95, 0x7f, 0x32, 0x5a, 0xa7, 0x97, 0xfd, 0xdf, 0x6d,
	0x70, 0x9a, 0x38, 0x39, 0x80, 0xcd, 0x52, 0xdf, 0x94, 0xb8, 0xa1, 0x97, 0x7e, 0x44, 0xde, 0x42,
	0x5b, 0xce, 0xb8, 0x92, 0x81, 0xe2, 0x8a, 0xa5, 0x74, 0xe5, 0xa8, 0x75, 0xdc, 0xf6, 0x9e, 0xb8,
	0xa6, 0x0d, 0x6e, 0xdd, 0x06, 0xf7, 0xbb, 0x9f, 0xa9, 0x13, 0xef, 0x07, 0x4b, 0x0b, 0x1c, 0x43,
	0x09, 0x5c, 0x69, 0x3d, 0x79, 0x07, 0x1d, 0x83, 0xf3, 0x2c, 0x98, 0x72, 0x96, 0xd2, 0x55, 0x0b,
	0x03, 0x93, 0xf1, 0x4b, 0x76, 0xc1, 0x59, 0x4a, 0x46, 0xb0, 0x53, 0x39, 0xc4, 0xb1, 0xb1, 0x58,
	0xb3, 0xb0, 0xd8, 0x36, 0x16, 0x71, 0x5c, 0x7a, 0x0c, 0xeb, 0x2a, 0x26, 0x29, 0x0f, 0xe7, 0x18,
	0xd1, 0x75, 0x6b, 0x8b, 0x91, 0x21, 0xc8, 0x39, 0x74, 0x8d, 0x45, 0x92, 0xc9, 0x24, 0xc2, 0x60,
	0xc2, 0x6f, 0xe8, 0x86, 0x85, 0x8b, 0x29, 0xde, 0x2f, 0xa1, 0x11, 0xbf, 0x21, 0x9f, 0xa0, 0x57,
	0x6d, 0xa7, 0x50, 0x8d, 0xd1, 0xa6, 0x85, 0xd1, 0xae, 0xd9, 0x91, 0xa1, 0xb4, 0xd3, 0x19, 0x6c,
	0xe7, 0x4c, 0x4a, 0xac, 0x8f, 0x66, 0xcb, 0xa6, 0xb3, 0x86, 0x30, 0x67, 0xf3, 0x11, 0x76, 0x2b,
	0x03, 0x16, 0x86, 0x85, 0x60, 0xe1, 0x2d, 0x75, 0x6c, 0x76, 0x64, 0xa0, 0x61, 0xc5, 0x10, 0x1f,
	0x7a, 0x95, 0x4d, 0x8e, 0x22, 0xc4, 0x4c, 0xb1, 0x29, 0x52, 0xb0, 0x30, 0xea, 0x1a, 0xec, 0x6b,
	0x43, 0xe9, 0x73, 0x62, 0x4a, 0xb1, 0x70, 0x5e, 0xef, 0xa9, 0x6d, 0x73, 0x4e, 0x15, 0x62, 0x36,
	0xe5, 0x43, 0xaf, 0xb6, 0x88, 0x58, 0x36, 0x45, 0xc1, 0x0b, 0x49, 0xb7, 0x6d, 0xaa, 0xa9, 0xb0,
	0x0f, 0x35, 0x45, 0x3c, 0x58, 0x8f, 0x79, 0x91, 0x4a, 0xda, 0xb1, 0xc0, 0x8d, 0x94, 0xbc, 0x84,
	0xcd, 0x90, 0x8b, 0x0c, 0x85, 0xa4, 0x3b, 0x16, 0x54, 0x2d, 0x26, 0xaf, 0x60, 0x8b, 0xc7, 0xb1,
	0x3e, 0x5a, 0x49, 0x77, 0x2d, 0xc0, 0x46, 0x4d, 0xde, 0x00, 0xe4, 0x5c, 0xf7, 0x51, 0x26, 0x3c,
	0xa3, 0x5d, 0x9b, 0xff, 0xe7, 0x9d, 0x5e, 0x5f, 0xa2, 0x5b, 0x4c, 0x53, 0xbe, 0x0c, 0x42, 0x26,
	0x22, 0x49, 0x7b, 0x36, 0x97, 0xc8, 0x10, 0xef, 0x35, 0x40, 0x4e, 0xc1, 0x11, 0x18, 0x55, 0x34,
	0xb1, 0xa9, 0x5c, 0x60, 0x64, 0x50, 0x0f, 0xd6, 0x25, 0xbb, 0x46, 0x49, 0xff, 0xb7, 0xe9, 0x6f,
	0x29, 0x25, 0x23, 0xe8, 0xc8, 0x62, 0x22, 0x55, 0xa2, 0x0a, 0x95, 0xf0, 0x4c, 0xd2, 0x47, 0x16,
	0xec, 0x43, 0x84, 0xbc, 0x06, 0xd0, 0xef, 0x48, 0x30, 0x4f, 0xc2, 0xb9, 0xa4, 0x7b, 0x16, 0x06,
	0x8e, 0xd6, 0x7f, 0xd6, 0x72, 0x7d, 0x45, 0x4b, 0x98, 0x29, 0x85, 0x8b, 0x5c, 0x49, 0xba, 0x6f,
	0x73, 0x45, 0x35, 0x32, 0xac, 0x08, 0x9d, 0x3f, 0x16, 0x88, 0x55, 0xfe, 0x03, 0x9b, 0xfc, 0x5a,
	0x6f, 0xf2, 0x9f, 0x82, 0xa3, 0x66, 0x82, 0x2f, 0xf5, 0x3b, 0x44, 0xa9, 0x4d, 0xbf, 0x4b, 0xb9,
	0x9f, 0x49, 0x0f, 0xa1, 0xdb, 0x3c, 0xf8, 0x97, 0x28, 0xae, 0x93, 0x10, 0xc9, 0x37, 0xd8, 0xbf,
	0x40, 0xd5, 0x84, 0xcf, 0xb9, 0xa8, 0xc6, 0x17, 0x39, 0xbc, 0x3f, 0x40, 0x1e, 0xce, 0xb4, 0xc3,
	0xc7, 0xf7, 0x7f, 0x7b, 0x30, 0xbe, 0xfa, 0xff, 0x8d, 0x86, 0x3f, 0xcf, 0xa6, 0x89, 0x9a, 0x15,
	0x13, 0x37, 0xe4, 0x66, 0x90, 0x26, 0x52, 0x25, 0x21, 0xbf, 0xf7, 0xf9, 0x22, 0x62, 0x8a, 0x0d,
	0xfe, 0x3a, 0x7d, 0x27, 0x1b, 0x65, 0xe4, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x35,
	0x4a, 0xc5, 0xa1, 0x07, 0x00, 0x00,
}
